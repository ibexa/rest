parameters:
    ibexa.rest.output.visitor.json.regexps:
        - '(^application/vnd\.ibexa\.api\.[A-Za-z]+\+json$)'
        - '(^application/json$)'
    ibexa.rest.output.visitor.xml.regexps:
        - '(^application/vnd\.ibexa\.api\.[A-Za-z]+\+xml$)'
        - '(^application/xml$)'
        - '(^.*/.*$)'

services:
    Ibexa\Bundle\Rest\Serializer\SerializerFactory:
        arguments:
            - !tagged_iterator 'ibexa.rest.serializer.normalizer'
            - !tagged_iterator 'ibexa.rest.serializer.encoder'

    ibexa.rest.serializer:
        class: Symfony\Component\Serializer\Serializer
        autoconfigure: false
        factory: [ '@Ibexa\Bundle\Rest\Serializer\SerializerFactory', 'create' ]

    Ibexa\Bundle\Rest\Routing\OptionsLoader:
        arguments:
            - '@Ibexa\Bundle\Rest\Routing\OptionsLoader\RouteCollectionMapper'
            - '@Ibexa\Bundle\Core\Routing\DefaultRouter'
        tags:
            - { name: routing.loader }

    Ibexa\Bundle\Rest\Routing\OptionsLoader\RouteCollectionMapper:
        arguments:
            - '@Ibexa\Bundle\Rest\Routing\OptionsLoader\Mapper'

    Ibexa\Bundle\Rest\Routing\OptionsLoader\Mapper: ~

    Ibexa\Bundle\Rest\CorsOptions\RestProvider:
        arguments: ["@router.default"]
        tags:
            - { name: nelmio_cors.options_provider }

    Ibexa\Rest\Output\FieldTypeSerializer:
        arguments:
            - '@ibexa.api.service.field_type'
            - '@Ibexa\Rest\FieldTypeProcessorRegistry'

    Ibexa\Bundle\Rest\RequestParser\Router:
        arguments:
            - "@router"

    Ibexa\Rest\Input\ParserTools: ~

    Ibexa\Rest\Input\FieldTypeParser:
        arguments:
            - '@ibexa.api.service.content'
            - '@ibexa.api.service.content_type'
            - '@ibexa.api.service.field_type'
            - '@Ibexa\Rest\FieldTypeProcessorRegistry'

    Ibexa\Bundle\Rest\ApiLoader\Factory:
        arguments: ['@ibexa.config.resolver', '@ibexa.api.repository']
        calls:
            - [setRequestStack, ["@request_stack"]]

    Ibexa\Rest\Server\Service\ExpressionRouterRootResourceBuilder:
         arguments: ["@router", '@Ibexa\Bundle\Core\Routing\DefaultRouter', '@ibexa.config.resolver']

    Ibexa\Rest\Server\Controller:
        calls:
            - [ setContainer, ["@service_container"] ]
            - [ setInputDispatcher, ['@Ibexa\Rest\Input\Dispatcher'] ]
            - [ setRouter, ["@router"] ]
            - [ setRequestParser, ['@Ibexa\Bundle\Rest\RequestParser\Router'] ]
            - [ setRepository, ['@ibexa.api.repository'] ]

    Ibexa\Rest\Server\Controller\Root:
        parent: Ibexa\Rest\Server\Controller
        arguments: ['@Ibexa\Rest\Server\Service\ExpressionRouterRootResourceBuilder']
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Section:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.section'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\BinaryContent:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.field_type.ezimage.variation_service'
            - '@ibexa.config.resolver'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Content:
        parent: Ibexa\Rest\Server\Controller
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\ContentType:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.content_type'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Role:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.role'
            - '@ibexa.api.service.user'
            - '@ibexa.api.service.location'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Language:
        autowire: true
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Location:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.location'
            - '@ibexa.api.service.content'
            - '@ibexa.api.service.trash'
            - '@ibexa.api.service.url_alias'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\ObjectState:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.object_state'
            - '@ibexa.api.service.content'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Trash:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.trash'
            - '@ibexa.api.service.location'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\User:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.user'
            - '@ibexa.api.service.role'
            - '@ibexa.api.service.content'
            - '@ibexa.api.service.content_type'
            - '@ibexa.api.service.location'
            - '@ibexa.api.service.section'
            - '@ibexa.api.repository'
            - '@Ibexa\Contracts\Core\Repository\PermissionResolver'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\URLWildcard:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.url_wildcard'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\URLAlias:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.url_alias'
            - '@ibexa.api.service.location'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Views:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.search'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\SessionController:
        class: Ibexa\Rest\Server\Controller\SessionController
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '%ibexa.rest.csrf_token_intention%'
            - '@Ibexa\Contracts\Core\Repository\PermissionResolver'
            - '@ibexa.api.service.user'
            - '@?ibexa.rest.session_authenticator'
            - '@?Ibexa\Rest\Server\Security\CsrfTokenManager'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Bookmark:
        class: Ibexa\Rest\Server\Controller\Bookmark
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@ibexa.api.service.bookmark'
            - '@ibexa.api.service.location'
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\JWT:
        parent: Ibexa\Rest\Server\Controller
        arguments:
            - '@Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface'
            - '@?ibexa.rest.session_authenticator'
        tags: [controller.service_arguments]

    Ibexa\Bundle\Rest\EventListener\RequestListener:
        tags:
            - { name: kernel.event_subscriber }

    Ibexa\Bundle\Rest\EventListener\ResponseListener:
        arguments:
            - '@Ibexa\Rest\Server\View\AcceptHeaderVisitorDispatcher'
        calls:
            - ['setLogger', ['@?logger']]
        tags:
            - { name: kernel.event_subscriber }
            - { name: monolog.logger, channel: request }

    Ibexa\Bundle\Rest\EventListener\CsrfListener:
        arguments:
            - "@event_dispatcher"
            - "%form.type_extension.csrf.enabled%"
            - '%ibexa.rest.csrf_token_intention%'
            - '@?Ibexa\Rest\Server\Security\CsrfTokenManager'
        tags:
            - { name: kernel.event_subscriber }

    Ibexa\Rest\Server\Controller\Options:
        parent: Ibexa\Rest\Server\Controller
        tags: [controller.service_arguments]

    Ibexa\Rest\Server\Controller\Services:
        arguments: ['%ibexa.field_type.country.data%']
        tags: [controller.service_arguments]

    Ibexa\Rest\FieldTypeProcessorRegistry:
        lazy: true

    Ibexa\Rest\FieldTypeProcessor\ImageProcessor:
        factory: ['@Ibexa\Bundle\Rest\ApiLoader\Factory', getImageFieldTypeProcessor]
        arguments:
            - "@router"
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezimage }

    Ibexa\Rest\FieldTypeProcessor\ImageAssetFieldTypeProcessor:
        factory: ['@Ibexa\Bundle\Rest\ApiLoader\Factory', getImageAssetFieldTypeProcessor]
        arguments:
            - "@router"
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezimageasset }

    Ibexa\Rest\FieldTypeProcessor\DateAndTimeProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezdatetime }

    Ibexa\Rest\FieldTypeProcessor\DateProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezdate }

    Ibexa\Rest\FieldTypeProcessor\MediaProcessor:
        factory: ['@Ibexa\Bundle\Rest\ApiLoader\Factory', getMediaFieldTypeProcessor]
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezmedia }

    Ibexa\Rest\FieldTypeProcessor\RelationListProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezobjectrelationlist }
        calls:
            - [setRouter, ["@router"]]
            - [setLocationService, ['@ibexa.api.service.location']]

    Ibexa\Rest\FieldTypeProcessor\RelationProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezobjectrelation }
        calls:
            - [setRouter, ["@router"]]
            - [setLocationService, ['@ibexa.api.service.location']]

    Ibexa\Rest\FieldTypeProcessor\TimeProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: eztime }

    Ibexa\Rest\FieldTypeProcessor\BinaryProcessor:
        factory: ['@Ibexa\Bundle\Rest\ApiLoader\Factory', getBinaryFileFieldTypeProcessor]
        arguments:
            - '@ibexa.core.io.default_url_decorator'
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezbinaryfile }

    Ibexa\Rest\FieldTypeProcessor\FloatProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezfloat }

    Ibexa\Rest\FieldTypeProcessor\StringProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezstring }

    Ibexa\Rest\FieldTypeProcessor\UserProcessor:
        tags:
            - { name: ibexa.rest.field_type.processor, alias: ezuser }

    ### OUTPUT

    # Main REST output dispatcher
    # Gets a <requestMatch> => output.visitor mapping with the ibexa.rest.output.visitor tag.
    Ibexa\Rest\Server\View\AcceptHeaderVisitorDispatcher: ~

    # format output visitors
    ibexa.rest.output.visitor.json:
        class: Ibexa\Contracts\Rest\Output\Visitor
        arguments:
            - '@Ibexa\Rest\Output\Generator\Json'
            - '@Ibexa\Contracts\Rest\Output\ValueObjectVisitorDispatcher'
        tags:
            - { name: ibexa.rest.output.visitor, regexps: ibexa.rest.output.visitor.json.regexps }

    ibexa.rest.output.visitor.xml:
        class: Ibexa\Contracts\Rest\Output\Visitor
        arguments:
            - '@Ibexa\Rest\Output\Generator\Xml'
            - '@Ibexa\Contracts\Rest\Output\ValueObjectVisitorDispatcher'
        tags:
            - { name: ibexa.rest.output.visitor, regexps: ibexa.rest.output.visitor.xml.regexps }

    # format output generators
    Ibexa\Rest\Output\Generator\Xml:
        arguments:
            - '@Ibexa\Rest\Output\Generator\Xml\FieldTypeHashGenerator'
        calls:
            - [ setFormatOutput, [ "%kernel.debug%" ] ]

    Ibexa\Rest\Output\Generator\Xml\FieldTypeHashGenerator:
        arguments:
            $normalizer: '@ibexa.rest.serializer'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: ibexa.rest }

    Ibexa\Rest\Output\Generator\Json:
        arguments:
            - '@Ibexa\Rest\Output\Generator\Json\FieldTypeHashGenerator'
        calls:
            - [ setFormatOutput, [ "%kernel.debug%" ] ]

    Ibexa\Rest\Output\Generator\Json\FieldTypeHashGenerator:
        arguments:
            $normalizer: '@ibexa.rest.serializer'
            $logger: '@logger'
        tags:
            - { name: monolog.logger, channel: ibexa.rest }

    # value objects visitors
    Ibexa\Contracts\Rest\Output\ValueObjectVisitorDispatcher: ~

    ibexa.rest.output.value_object_visitor.Exception.InvalidArgumentException:
        class: Ibexa\Rest\Server\Output\ValueObjectVisitor\InvalidArgumentException
        tags:
            - { name: ibexa.rest.output.value_object.visitor, type: \Ibexa\Contracts\Core\Repository\Exceptions\InvalidArgumentException }

    Ibexa\Rest\Input\Dispatcher:
        arguments:
            - '@Ibexa\Contracts\Rest\Input\ParsingDispatcher'
            - []

    Ibexa\Contracts\Rest\Input\ParsingDispatcher:
        arguments:
            - '@event_dispatcher'

    Ibexa\Rest\Input\Handler\Json:
        tags:
            - { name: ibexa.rest.input.handler, format: json }

    Ibexa\Rest\Input\Handler\Xml:
        tags:
            - { name: ibexa.rest.input.handler, format: xml }

    Ibexa\Bundle\Core\Routing\DefaultRouter:
        class: Ibexa\Bundle\Core\Routing\DefaultRouter
        parent: hautelook.router.template
        calls:
            - [ setOption, [ strict_requirements, ~ ] ]
