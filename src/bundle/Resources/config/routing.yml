# Root resource

ibexa.rest.load_root_resource:
    path: /
    controller: Ibexa\Rest\Server\Controller\Root::loadRootResource
    methods: [GET]

# OpenAPI documentation

ibexa.api_platform.documentation:
    path: /doc/{index}.{_format}
    controller: ibexa.api_platform.action.entrypoint
    defaults:
        index: index
        _format: ~

# Sections

ibexa.rest.list_sections:
    path: /content/sections
    controller: Ibexa\Rest\Server\Controller\Section\SectionListController::listSections
    methods: [GET]

ibexa.rest.create_section:
    path: /content/sections
    controller: Ibexa\Rest\Server\Controller\Section\SectionCreateController::createSection
    methods: [POST]

ibexa.rest.load_section:
    path: /content/sections/{sectionId}
    controller: Ibexa\Rest\Server\Controller\Section\SectionLoadByIdController::loadSection
    methods: [GET]
    requirements:
        sectionId: \d+

ibexa.rest.update_section:
    path: /content/sections/{sectionId}
    controller: Ibexa\Rest\Server\Controller\Section\SectionUpdateController::updateSection
    methods: [PATCH]
    requirements:
        sectionId: \d+

ibexa.rest.delete_section:
    path: /content/sections/{sectionId}
    controller: Ibexa\Rest\Server\Controller\Section\SectionDeleteController::deleteSection
    methods: [DELETE]
    requirements:
        sectionId: \d+

ibexa.rest.refresh_session:
    path: /user/sessions/{sessionId}/refresh
    controller: Ibexa\Rest\Server\Controller\SessionController::refreshSessionAction
    defaults:
        csrf_protection: false
    methods: [POST]

# Content

ibexa.rest.content.copy:
    path: /content/objects/{contentId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentCopyController::copy
    condition: 'ibexa_get_media_type(request) === "CopyContentInput"'
    methods: [POST]
    options:
        options_route_suffix: 'CopyContentInput'
    requirements:
        contentId: \d+

ibexa.rest.content.create_draft_from_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentDraftCreateFromVersionController::createDraftFromVersion
    condition: 'ibexa_get_media_type(request) === "CreateDraftFromVersionInput"'
    methods: [POST]
    options:
        options_route_suffix: 'CreateDraftFromVersionInput'

ibexa.rest.content.create_draft_from_current_version:
    path: /content/objects/{contentId}/currentversion
    controller: Ibexa\Rest\Server\Controller\Content\ContentDraftCreateFromCurrentVersionController::createDraftFromCurrentVersion
    condition: 'ibexa_get_media_type(request) === "CreateDraftFromCurrentVersionInput"'
    methods: [POST]
    options:
        options_route_suffix: 'CreateDraftFromCurrentVersionInput'
    requirements:
        contentId: \d+

ibexa.rest.content.publish_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionPublishController::publishVersion
    condition: 'ibexa_get_media_type(request) === "PublishContentVersionInput"'
    methods: [POST]
    options:
        options_route_suffix: 'PublishContentVersionInput'
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.redirect_content:
    path: /content/objects
    controller: Ibexa\Rest\Server\Controller\Content\ContentRedirectController::redirectContent
    methods: [GET]

ibexa.rest.create_content:
    path: /content/objects
    controller: Ibexa\Rest\Server\Controller\Content\ContentCreateController::createContent
    methods: [POST]

ibexa.rest.update_content_metadata:
    path: /content/objects/{contentId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentMetadataUpdateController::updateContentMetadata
    methods: [PATCH]
    requirements:
        contentId: \d+

ibexa.rest.load_content:
    path: /content/objects/{contentId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentLoadByIdController::loadContent
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.delete_content:
    path: /content/objects/{contentId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentDeleteController::deleteContent
    methods: [DELETE]
    requirements:
        contentId: \d+

ibexa.rest.copy_content:
    path: /content/objects/{contentId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentCopyController::copyContent
    methods: [COPY]
    requirements:
        contentId: \d+

ibexa.rest.delete_content_translation:
    path: /content/objects/{contentId}/translations/{languageCode}
    controller: Ibexa\Rest\Server\Controller\Content\ContentTranslationDeleteController::deleteContentTranslation
    methods: [DELETE]

ibexa.rest.redirect_current_version_relations:
    path: /content/objects/{contentId}/relations
    controller: Ibexa\Rest\Server\Controller\Content\ContentCurrentVersionRelationsRedirectController::redirectCurrentVersionRelations
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.load_content_versions:
    path: /content/objects/{contentId}/versions
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionsListController::loadContentVersions
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.load_version_relations:
    path: /content/objects/{contentId}/versions/{versionNumber}/relations
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionsRelationsListController::loadVersionRelations
    methods: [GET]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.create_relation:
    path: /content/objects/{contentId}/versions/{versionNumber}/relations
    controller: Ibexa\Rest\Server\Controller\Content\ContentRelationCreateController::createRelation
    methods: [POST]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.load_version_relation:
    path: /content/objects/{contentId}/versions/{versionNumber}/relations/{relationId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionRelationLoadByIdController::loadVersionRelation
    methods: [GET]
    requirements:
        contentId: \d+
        versionNumber: \d+
        relationId: \d+

ibexa.rest.remove_relation:
    path: /content/objects/{contentId}/versions/{versionNumber}/relations/{relationId}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionRelationDeleteController::removeRelation
    methods: [DELETE]
    requirements:
        contentId: \d+
        versionNumber: \d+
        relationId: \d+

ibexa.rest.load_content_in_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentInVersionLoadController::loadContentInVersion
    methods: [GET]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.update_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionUpdateController::updateVersion
    methods: [PATCH]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.delete_content_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionDeleteController::deleteContentVersion
    methods: [DELETE]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.delete_translation_from_draft:
    path: /content/objects/{contentId}/versions/{versionNumber}/translations/{languageCode}
    controller: Ibexa\Rest\Server\Controller\Content\ContentDraftTranslationDeleteController::deleteTranslationFromDraft
    methods: [DELETE]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.create_draft_from_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentDraftCreateFromVersionController::createDraftFromVersion
    methods: [COPY]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.publish_version:
    path: /content/objects/{contentId}/versions/{versionNumber}
    controller: Ibexa\Rest\Server\Controller\Content\ContentVersionPublishController::publishVersion
    methods: [PUBLISH]
    requirements:
        contentId: \d+
        versionNumber: \d+

ibexa.rest.redirect_current_version:
    path: /content/objects/{contentId}/currentversion
    controller: Ibexa\Rest\Server\Controller\Content\ContentCurrentVersionRedirectController::redirectCurrentVersion
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.create_draft_from_current_version:
    path: /content/objects/{contentId}/currentversion
    controller: Ibexa\Rest\Server\Controller\Content\ContentDraftCreateFromCurrentVersionController::createDraftFromCurrentVersion
    methods: [COPY]
    requirements:
        contentId: \d+

ibexa.rest.hide_content:
    path: /content/objects/{contentId}/hide
    controller: Ibexa\Rest\Server\Controller\Content\ContentHideController::hideContent
    methods: [POST]
    requirements:
        contentId: \d+

ibexa.rest.reveal_content:
    path: /content/objects/{contentId}/reveal
    controller: Ibexa\Rest\Server\Controller\Content\ContentRevealController::revealContent
    methods: [POST]
    requirements:
        contentId: \d+

# Binary content

ibexa.rest.binary_content.get_image_variation:
    path: /content/binary/images/{imageId}/variations/{variationIdentifier}
    controller: Ibexa\Rest\Server\Controller\BinaryContent::getImageVariation
    methods: [GET]
    requirements:
        imageId: \d+-\d+(-\d+)?

# Views

ibexa.rest.views.create:
    path: /views
    controller: Ibexa\Rest\Server\Controller\Views::createView
    methods: [POST]

ibexa.rest.views.list:
    path: /views
    controller: Ibexa\Rest\Server\Controller\Views::listView
    methods: [GET]

ibexa.rest.views.load:
    path : /views/{viewId}
    controller: Ibexa\Rest\Server\Controller\Views::getView
    methods: [GET]

ibexa.rest.views.load.results:
    path: /views/{viewId}/results
    controller: Ibexa\Rest\Server\Controller\Views::loadViewResults
    methods: [GET]

# Object states

ibexa.rest.load_object_state_groups:
    path: /content/objectstategroups
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupListController::loadObjectStateGroups
    methods: [GET]

ibexa.rest.create_object_state_group:
    path: /content/objectstategroups
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupCreateController::createObjectStateGroup
    methods: [POST]

ibexa.rest.load_object_state_group:
    path: /content/objectstategroups/{objectStateGroupId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupLoadByIdController::loadObjectStateGroup
    methods: [GET]
    requirements:
        objectStateGroupId: \d+

ibexa.rest.update_object_state_group:
    path: /content/objectstategroups/{objectStateGroupId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupUpdateController::updateObjectStateGroup
    methods: [PATCH]
    requirements:
        objectStateGroupId: \d+

ibexa.rest.delete_object_state_group:
    path: /content/objectstategroups/{objectStateGroupId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupDeleteController::deleteObjectStateGroup
    methods: [DELETE]
    requirements:
        objectStateGroupId: \d+

ibexa.rest.load_object_states:
    path: /content/objectstategroups/{objectStateGroupId}/objectstates
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateListController::loadObjectStates
    methods: [GET]
    requirements:
        objectStateGroupId: \d+

ibexa.rest.create_object_state:
    path: /content/objectstategroups/{objectStateGroupId}/objectstates
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateCreateController::createObjectState
    methods: [POST]
    requirements:
        objectStateGroupId: \d+

ibexa.rest.load_object_state:
    path: /content/objectstategroups/{objectStateGroupId}/objectstates/{objectStateId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateLoadByIdController::loadObjectState
    methods: [GET]
    requirements:
        objectStateGroupId: \d+
        objectStateId: \d+

ibexa.rest.update_object_state:
    path: /content/objectstategroups/{objectStateGroupId}/objectstates/{objectStateId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateUpdateController::updateObjectState
    methods: [PATCH]
    requirements:
        objectStateGroupId: \d+
        objectStateId: \d+

ibexa.rest.delete_object_state:
    path: /content/objectstategroups/{objectStateGroupId}/objectstates/{objectStateId}
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStateGroupDeleteController::deleteObjectState
    methods: [DELETE]
    requirements:
        objectStateGroupId: \d+
        objectStateId: \d+

ibexa.rest.get_object_states_for_content:
    path: /content/objects/{contentId}/objectstates
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStatesForContnetListController::getObjectStatesForContent
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.set_object_states_for_content:
    path: /content/objects/{contentId}/objectstates
    controller: Ibexa\Rest\Server\Controller\ObjectState\ObjectStatesForContentUpdateController::setObjectStatesForContent
    methods: [PATCH]
    requirements:
        contentId: \d+


# Languages

ibexa.rest.languages.list:
    path: /languages
    methods: [GET]
    controller: Ibexa\Rest\Server\Controller\Language\LanguageListController::listLanguages

ibexa.rest.languages.view:
    path: /languages/{languageCode}
    methods: [GET]
    controller: Ibexa\Rest\Server\Controller\Language\LanguageLoadByIdController::loadLanguage

# Locations

ibexa.rest.location.copy:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSubtreeCopyController::copy
    condition: 'ibexa_get_media_type(request) === "CopyLocationInput"'
    methods: [POST]
    options:
        options_route_suffix: 'CopyLocationInput'
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.trash_location:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Trash\LocationTrashController::trashLocation
    condition: 'ibexa_get_media_type(request) === "TrashLocationInput"'
    methods: [POST, TRASH]
    options:
        options_route_suffix: 'TrashLocationInput'
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.location.swap:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSwapController::swap
    condition: 'ibexa_get_media_type(request) === "SwapLocationInput"'
    methods: [POST]
    options:
        options_route_suffix: 'SwapLocationInput'
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.location.move:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSubtreeMoveController::moveLocation
    condition: 'ibexa_get_media_type(request) === "MoveLocationInput"'
    methods: [POST]
    options:
        options_route_suffix: 'MoveLocationInput'
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.redirect_location:
    path: /content/locations
    controller: Ibexa\Rest\Server\Controller\Location\LocationRedirectController::redirectLocation
    methods: [GET]

ibexa.rest.load_location:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationLoadByPathController::loadLocation
    methods: [GET]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.update_location:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationUpdateController::updateLocation
    methods: [PATCH]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.delete_subtree:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSubtreeDeleteController::deleteSubtree
    methods: [DELETE]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.copy_subtree:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSubtreeCopyController::copySubtree
    methods: [COPY]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.move_subtree:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSubtreeMoveController::moveSubtree
    methods: [MOVE]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.swap_location:
    path: /content/locations/{locationPath}
    controller: Ibexa\Rest\Server\Controller\Location\LocationSwapController::swapLocation
    methods: [SWAP]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.load_location_children:
    path: /content/locations/{locationPath}/children
    controller: Ibexa\Rest\Server\Controller\Location\LocationChildrenListController::loadLocationChildren
    methods: [GET]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.load_locations_for_content:
    path: /content/objects/{contentId}/locations
    controller: Ibexa\Rest\Server\Controller\Location\LocationForContentListController::loadLocationsForContent
    methods: [GET]
    requirements:
        contentId: \d+

ibexa.rest.create_location:
    path: /content/objects/{contentId}/locations
    controller: Ibexa\Rest\Server\Controller\Location\LocationCreateController::createLocation
    methods: [POST]
    requirements:
        contentId: \d+

# Content types

ibexa.rest.content_type.publish_draft:
    path: /content/types/{contentTypeId}/draft
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftPublishController::publishContentTypeDraft
    condition: 'ibexa_get_media_type(request) === "PublishContentTypeInput"'
    methods: [POST]
    options:
        options_route_suffix: 'PublishContentTypeInput'
    requirements:
        contentTypeId: \d+

ibexa.rest.content_type.copy:
    path: /content/types/{contentTypeId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeCopyController::copyContentType
    condition: 'ibexa_get_media_type(request) === "CopyContentTypeInput"'
    methods: [POST]
    options:
        options_route_suffix: 'CopyContentTypeInput'
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type_group_list:
    path: /content/typegroups
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupsListController::loadContentTypeGroupList
    methods: [GET]

ibexa.rest.create_content_type_group:
    path: /content/typegroups
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupCreateController::createContentTypeGroup
    methods: [POST]

ibexa.rest.load_content_type_group:
    path: /content/typegroups/{contentTypeGroupId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupLoadByIdController::loadContentTypeGroup
    methods: [GET]
    requirements:
        contentTypeGroupId: \d+

ibexa.rest.update_content_type_group:
    path: /content/typegroups/{contentTypeGroupId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupUpdateController::updateContentTypeGroup
    methods: [PATCH]
    requirements:
        contentTypeGroupId: \d+

ibexa.rest.delete_content_type_group:
    path: /content/typegroups/{contentTypeGroupId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupDeleteController::deleteContentTypeGroup
    methods: [DELETE]
    requirements:
        contentTypeGroupId: \d+

ibexa.rest.list_content_types_for_group:
    path: /content/typegroups/{contentTypeGroupId}/types
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeListForGroupController::listContentTypesForGroup
    methods: [GET]
    requirements:
        contentTypeGroupId: \d+

ibexa.rest.create_content_type:
    path: /content/typegroups/{contentTypeGroupId}/types
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeCreateController::createContentType
    methods: [POST]
    requirements:
        contentTypeGroupId: \d+

ibexa.rest.list_content_types:
    # @todo: Handle all GET parameters
    path: /content/types
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeListController::listContentTypes
    methods: [GET]

ibexa.rest.copy_content_type:
    path: /content/types/{contentTypeId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeCopyController::copyContentType
    methods: [COPY]
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type:
    path: /content/types/{contentTypeId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeLoadByIdController::loadContentType
    methods: [GET]
    requirements:
        contentTypeId: \d+

ibexa.rest.create_content_type_draft:
    path: /content/types/{contentTypeId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftCreateController::createContentTypeDraft
    methods: [POST]
    requirements:
        contentTypeId: \d+

ibexa.rest.delete_content_type:
    path: /content/types/{contentTypeId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDeleteController::deleteContentType
    methods: [DELETE]
    requirements:
        contentTypeId: \d+

ibexa.rest.delete_content_type_draft:
    path: /content/types/{contentTypeId}/draft
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftDeleteController::deleteContentTypeDraft
    methods: [DELETE]
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type_field_definition_list:
    path: /content/types/{contentTypeId}/fieldDefinitions
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeFieldDefinitionListController::loadContentTypeFieldDefinitionList
    methods: [GET]
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type_field_definition:
    path: /content/types/{contentTypeId}/fieldDefinitions/{fieldDefinitionId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeFieldDefinitionLoadByIdController::loadContentTypeFieldDefinition
    methods: [GET]
    requirements:
        contentTypeId: \d+
        fieldDefinitionId: \d+

ibexa.rest.load_content_type_field_definition_by_identifier:
    path: /content/types/{contentTypeId}/fieldDefinition/{fieldDefinitionIdentifier}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeFieldDefinitionLoadByIdentifierController::loadContentTypeFieldDefinitionByIdentifier
    methods: [GET]
    requirements:
        contentTypeId: \d+
        fieldDefinitionIdentifier: \w+

ibexa.rest.load_content_type_draft:
    path: /content/types/{contentTypeId}/draft
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftLoadController::loadContentTypeDraft
    methods: [GET]
    requirements:
        contentTypeId: \d+

ibexa.rest.update_content_type_draft:
    path: /content/types/{contentTypeId}/draft
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftUpdateController::updateContentTypeDraft
    methods: [PATCH]
    requirements:
        contentTypeId: \d+

ibexa.rest.publish_content_type_draft:
    path: /content/types/{contentTypeId}/draft
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftPublishController::publishContentTypeDraft
    methods: [PUBLISH]
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type_draft_field_definition_list:
    path: /content/types/{contentTypeId}/draft/fieldDefinitions
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftFieldDefinitionListController::loadContentTypeDraftFieldDefinitionList
    methods: [GET]
    requirements:
        contentTypeId: \d+

ibexa.rest.add_content_type_draft_field_definition:
    path: /content/types/{contentTypeId}/draft/fieldDefinitions
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftFeildDefinitionAddController::addContentTypeDraftFieldDefinition
    methods: [POST]
    requirements:
        contentTypeId: \d+

ibexa.rest.load_content_type_draft_field_definition:
    path: /content/types/{contentTypeId}/draft/fieldDefinitions/{fieldDefinitionId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftFieldDefinitionLoadByIdController::loadContentTypeDraftFieldDefinition
    methods: [GET]
    requirements:
        contentTypeId: \d+
        fieldDefinitionId: \d+

ibexa.rest.update_content_type_draft_field_definition:
    path: /content/types/{contentTypeId}/draft/fieldDefinitions/{fieldDefinitionId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftFieldDefinitionUpdateController::updateContentTypeDraftFieldDefinition
    methods: [PATCH]
    requirements:
        contentTypeId: \d+
        fieldDefinitionId: \d+

ibexa.rest.remove_content_type_draft_field_definition:
    path: /content/types/{contentTypeId}/draft/fieldDefinitions/{fieldDefinitionId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeDraftFieldDefinitionDeleteController::removeContentTypeDraftFieldDefinition
    methods: [DELETE]
    requirements:
        contentTypeId: \d+
        fieldDefinitionId: \d+

ibexa.rest.load_groups_of_content_type:
    path: /content/types/{contentTypeId}/groups
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeGroupListController::loadGroupsOfContentType
    methods: [GET]
    requirements:
        contentTypeId: \d+

ibexa.rest.link_content_type_to_group:
    # Handle GET parameter group in controller. Most likely already done
    path: /content/types/{contentTypeId}/groups
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeLinkToGroupController::linkContentTypeToGroup
    methods: [POST]
    requirements:
        contentTypeId: \d+

ibexa.rest.unlink_content_type_from_group:
    path: /content/types/{contentTypeId}/groups/{contentTypeGroupId}
    controller: Ibexa\Rest\Server\Controller\ContentType\ContentTypeUnlinkFromGroupController::unlinkContentTypeFromGroup
    methods: [DELETE]
    requirements:
        contentTypeId: \d+
        contentTypeGroupId: \d+

# Trash

ibexa.rest.trash.restore_trash_item:
    path: /content/trash/{trashItemId}
    controller: Ibexa\Rest\Server\Controller\Trash\TrashItemRestoreController::restoreItem
    condition: 'ibexa_get_media_type(request) === "RestoreTrashItemInput"'
    methods: [POST]
    options:
        options_route_suffix: 'RestoreTrashItemInput'
    requirements:
        trashItemId: \d+

ibexa.rest.load_trash_items:
    path: /content/trash
    controller: Ibexa\Rest\Server\Controller\Trash\TrashItemListController::loadTrashItems
    methods: [GET]

ibexa.rest.empty_trash:
    path: /content/trash
    controller: Ibexa\Rest\Server\Controller\Trash\TrashEmptyController::emptyTrash
    methods: [DELETE]

ibexa.rest.load_trash_item:
    path: /content/trash/{trashItemId}
    controller: Ibexa\Rest\Server\Controller\Trash\TrashItemLoadByIdController::loadTrashItem
    methods: [GET]
    requirements:
        trashItemId: \d+

ibexa.rest.delete_trash_item:
    path: /content/trash/{trashItemId}
    controller: Ibexa\Rest\Server\Controller\Trash\TrashItemDeleteController::deleteTrashItem
    methods: [DELETE]
    requirements:
        trashItemId: \d+

ibexa.rest.restore_trash_item:
    path: /content/trash/{trashItemId}
    controller: Ibexa\Rest\Server\Controller\Trash\TrashItemRestoreController::restoreTrashItem
    methods: [MOVE]
    requirements:
        trashItemId: \d+

# URL wildcards

ibexa.rest.list_url_wildcards:
    path: /content/urlwildcards
    controller: Ibexa\Rest\Server\Controller\URLWildcard::listURLWildcards
    methods: [GET]

ibexa.rest.create_url_wildcard:
    path: /content/urlwildcards
    controller: Ibexa\Rest\Server\Controller\URLWildcard::createURLWildcard
    methods: [POST]

ibexa.rest.load_url_wildcard:
    path: /content/urlwildcards/{urlWildcardId}
    controller: Ibexa\Rest\Server\Controller\URLWildcard::loadURLWildcard
    methods: [GET]
    requirements:
        urlWildcardId: \d+

ibexa.rest.delete_url_wildcard:
    path: /content/urlwildcards/{urlWildcardId}
    controller: Ibexa\Rest\Server\Controller\URLWildcard::deleteURLWildcard
    methods: [DELETE]
    requirements:
        urlWildcardId: \d+

# User policies

ibexa.rest.list_policies_for_user:
    path: /user/policies
    controller: Ibexa\Rest\Server\Controller\Role::listPoliciesForUser
    methods: [GET]

# Roles

ibexa.rest.role.publish:
    path: /user/roles/{roleId}/draft
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftPublishController::publishRoleDraft
    condition: 'ibexa_get_media_type(request) === "PublishRoleInput"'
    methods: [POST]
    options:
        options_route_suffix: 'PublishRoleInput'
    requirements:
        roleId: \d+

ibexa.rest.list_roles:
    path: /user/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleListController::listRoles
    methods: [GET]

ibexa.rest.create_role:
    path: /user/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleCreateController::createRole
    methods: [POST]
    requirements:

ibexa.rest.create_role_draft:
    path: /user/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftCreateController::createRoleDraft
    methods: [POST]
    requirements:
        roleId: \d+

ibexa.rest.load_role:
    path: /user/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleLoadByIdController::loadRole
    methods: [GET]
    requirements:
        roleId: \d+

ibexa.rest.load_role_draft:
    path: /user/roles/{roleId}/draft
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftLoadByRoleIdController::loadRoleDraft
    methods: [GET]
    requirements:
        roleId: \d+

ibexa.rest.update_role:
    path: /user/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleUpdateController::updateRole
    methods: [PATCH]
    requirements:
        roleId: \d+

ibexa.rest.update_role_draft:
    path: /user/roles/{roleId}/draft
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftUpdateController::updateRoleDraft
    methods: [PATCH]
    requirements:
        roleId: \d+

ibexa.rest.publish_role_draft:
    path: /user/roles/{roleId}/draft
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftPublishController::publishRoleDraft
    methods: [PUBLISH]
    requirements:
        roleId: \d+

ibexa.rest.delete_role:
    path: /user/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleDeleteController::deleteRole
    methods: [DELETE]
    requirements:
        roleId: \d+

ibexa.rest.delete_role_draft:
    path: /user/roles/{roleId}/draft
    controller: Ibexa\Rest\Server\Controller\Role\RoleDraftDeleteController::deleteRoleDraft
    methods: [DELETE]
    requirements:
        roleId: \d+

ibexa.rest.load_policies:
    path: /user/roles/{roleId}/policies
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyListController::loadPolicies
    methods: [GET]
    requirements:
        roleId: \d+

ibexa.rest.add_policy:
    path: /user/roles/{roleId}/policies
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyCreateController::addPolicy
    methods: [POST]
    requirements:
        roleId: \d+

ibexa.rest.delete_policies:
    path: /user/roles/{roleId}/policies
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyDeleteAllFromRoleController::deletePolicies
    methods: [DELETE]
    requirements:
        roleId: \d+

ibexa.rest.load_policy:
    path: /user/roles/{roleId}/policies/{policyId}
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyLoadByIdController::loadPolicy
    methods: [GET]
    requirements:
        roleId: \d+
        policyId: \d+

ibexa.rest.update_policy:
    path: /user/roles/{roleId}/policies/{policyId}
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyUpdateController::updatePolicy
    methods: [PATCH]
    requirements:
        roleId: \d+
        policyId: \d+

ibexa.rest.delete_policy:
    path: /user/roles/{roleId}/policies/{policyId}
    controller: Ibexa\Rest\Server\Controller\Role\RolePolicyDeleteController::deletePolicy
    methods: [DELETE]
    requirements:
        roleId: \d+
        policyId: \d+

# Users

ibexa.rest.user_group.move:
    path: /user/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserGroupMoveController::moveGroup
    condition: 'ibexa_get_media_type(request) === "MoveUserGroupInput"'
    methods: [POST]
    options:
        options_route_suffix: 'MoveUserGroupInput'
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.verify_users:
    path: /user/users
    controller: Ibexa\Rest\Server\Controller\User\UserVerifyController::verifyUsers
    methods: [HEAD]

ibexa.rest.load_users:
    path: /user/users
    controller: Ibexa\Rest\Server\Controller\User\UserListController::loadUsers
    methods: [GET]

ibexa.rest.load_user:
    path: /user/users/{userId}
    controller: Ibexa\Rest\Server\Controller\User\UserLoadByIdController::loadUser
    methods: [GET]
    requirements:
        userId: \d+

ibexa.rest.current_user:
    path: /user/current
    controller: Ibexa\Rest\Server\Controller\User\UserRedirectToCurrentUserController::redirectToCurrentUser
    methods: [GET]

ibexa.rest.update_user:
    path: /user/users/{userId}
    controller: Ibexa\Rest\Server\Controller\User\UserUpdateController::updateUser
    methods: [PATCH]
    requirements:
        userId: \d+

ibexa.rest.delete_user:
    path: /user/users/{userId}
    controller: Ibexa\Rest\Server\Controller\User\UserDeleteController::deleteUser
    methods: [DELETE]
    requirements:
        userId: \d+

ibexa.rest.load_user_groups_of_user:
    path: /user/users/{userId}/groups
    controller: Ibexa\Rest\Server\Controller\User\UserGroupsOfUserListController::loadUserGroupsOfUser
    methods: [GET]
    requirements:
        userId: \d+

ibexa.rest.assign_user_to_user_group:
    path: /user/users/{userId}/groups
    controller: Ibexa\Rest\Server\Controller\User\UserAssignToUserGroupController::assignUserToUserGroup
    methods: [POST]
    requirements:
        userId: \d+

ibexa.rest.unassign_user_from_user_group:
    path: /user/users/{userId}/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserUnassignFromUserGroupController::unassignUserFromUserGroup
    methods: [DELETE]
    requirements:
        userId: \d+
        groupPath: \d+

ibexa.rest.load_user_drafts:
    path: /user/users/{userId}/drafts
    controller: Ibexa\Rest\Server\Controller\User\UserDraftListController::loadUserDrafts
    methods: [GET]
    requirements:
        userId: \d+

ibexa.rest.load_role_assignments_for_user:
    path: /user/users/{userId}/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignmentForUserListController::loadRoleAssignmentsForUser
    methods: [GET]
    requirements:
        userId: \d+

ibexa.rest.assign_role_to_user:
    path: /user/users/{userId}/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignToUserController::assignRoleToUser
    methods: [POST]
    requirements:
        userId: \d+

ibexa.rest.load_role_assignment_for_user:
    path: /user/users/{userId}/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignmentForUserLoadByIdController::loadRoleAssignmentForUser
    methods: [GET]
    requirements:
        userId: \d+
        roleId: \d+

ibexa.rest.unassign_role_from_user:
    path: /user/users/{userId}/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleUnassignFromUserController::unassignRoleFromUser
    methods: [DELETE]
    requirements:
        userId: \d+
        roleId: \d+

ibexa.rest.load_user_groups:
    path: /user/groups
    controller: Ibexa\Rest\Server\Controller\User\UserGroupListController::loadUserGroups
    methods: [GET]

ibexa.rest.load_root_user_group:
    path: /user/groups/root
    controller: Ibexa\Rest\Server\Controller\User\UserGroupOfRootLoadController::loadRootUserGroup
    methods: [GET]

ibexa.rest.create_root_user_group:
    path: /user/groups/subgroups
    controller: Ibexa\Rest\Server\Controller\User\UserGroupCreateController::createUserGroup
    methods: [POST]

ibexa.rest.load_user_group:
    path: /user/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserGroupLoadByPathController::loadUserGroup
    methods: [GET]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.update_user_group:
    path: /user/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserGroupUpdateController::updateUserGroup
    methods: [PATCH]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.delete_user_group:
    path: /user/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserGroupDeleteController::deleteUserGroup
    methods: [DELETE]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.move_user_group:
    path: /user/groups/{groupPath}
    controller: Ibexa\Rest\Server\Controller\User\UserGroupMoveController::moveUserGroup
    methods: [MOVE]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.load_sub_user_groups:
    path: /user/groups/{groupPath}/subgroups
    controller: Ibexa\Rest\Server\Controller\User\UserSubGroupListController::loadSubUserGroups
    methods: [GET]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.create_user_group:
    path: /user/groups/{groupPath}/subgroups
    controller: Ibexa\Rest\Server\Controller\User\UserGroupCreateController::createUserGroup
    methods: [POST]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.load_users_from_group:
    path: /user/groups/{groupPath}/users
    controller: Ibexa\Rest\Server\Controller\User\UserGroupUsersListController::loadUsersFromGroup
    methods: [GET]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.create_user:
    path: /user/groups/{groupPath}/users
    controller: Ibexa\Rest\Server\Controller\User\UserCreateController::createUser
    methods: [POST]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.load_role_assignments_for_user_group:
    path: /user/groups/{groupPath}/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignmentForUserGroupListController::loadRoleAssignmentsForUserGroup
    methods: [GET]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.assign_role_to_user_group:
    path: /user/groups/{groupPath}/roles
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignToUserGroupController::assignRoleToUserGroup
    methods: [POST]
    requirements:
        groupPath: "[0-9/]+"

ibexa.rest.load_role_assignment_for_user_group:
    path: /user/groups/{groupPath}/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleAssignmentForUserGroupLoadByIdController::loadRoleAssignmentForUserGroup
    methods: [GET]
    requirements:
        groupPath: "[0-9/]+"
        roleId: \d+

ibexa.rest.unassign_role_from_user_group:
    path: /user/groups/{groupPath}/roles/{roleId}
    controller: Ibexa\Rest\Server\Controller\Role\RoleUnassignFromUserGroupController::unassignRoleFromUserGroup
    methods: [DELETE]
    requirements:
        groupPath: "[0-9/]+"
        roleId: \d+

ibexa.rest.create_session:
    path: /user/sessions
    controller: Ibexa\Rest\Server\Controller\SessionController::createSessionAction
    defaults:
        csrf_protection: false
    methods: [POST]

ibexa.rest.check_session:
    path: /user/sessions/current
    controller: Ibexa\Rest\Server\Controller\Session\SessionCheckController::checkSessionAction
    methods: [GET]
    defaults:
        csrf_protection: false

ibexa.rest.delete_session:
    path: /user/sessions/{sessionId}
    controller: Ibexa\Rest\Server\Controller\SessionController::deleteSessionAction
    defaults:
        csrf_protection: false
    methods: [DELETE]

# URL aliases

ibexa.rest.list_global_url_aliases:
    path: /content/urlaliases
    controller: Ibexa\Rest\Server\Controller\URLAlias\URLAliasListGlobalController::listGlobalURLAliases
    methods: [GET]

ibexa.rest.list_location_url_aliases:
    path: /content/locations/{locationPath}/urlaliases
    controller: Ibexa\Rest\Server\Controller\URLAlias\URLAliasListLocationController::listLocationURLAliases
    methods: [GET]
    requirements:
        locationPath: "[0-9/]+"

ibexa.rest.create_url_alias:
    path: /content/urlaliases
    controller: Ibexa\Rest\Server\Controller\URLAlias\URLAliasCreateController::createURLAlias
    methods: [POST]

ibexa.rest.load_url_alias:
    path: /content/urlaliases/{urlAliasId}
    controller: Ibexa\Rest\Server\Controller\URLAlias\URLAliasLoadByIdController::loadURLAlias
    methods: [GET]

ibexa.rest.delete_url_alias:
    path: /content/urlaliases/{urlAliasId}
    controller: Ibexa\Rest\Server\Controller\URLAlias\URLAliasDeleteController::deleteURLAlias
    methods: [DELETE]

# Services

ibexa.rest.load_country_list:
    path: /services/countries
    controller: Ibexa\Rest\Server\Controller\Services::loadCountryList
    methods: [GET]

# Bookmark

ibexa.rest.create_bookmark:
    path: /bookmark/{locationId}
    controller: Ibexa\Rest\Server\Controller\Bookmark\BookmarkCreateController::createBookmark
    methods: [POST]
    requirements:
        locationId: "[0-9]+"

ibexa.rest.delete_bookmark:
    path: /bookmark/{locationId}
    controller: Ibexa\Rest\Server\Controller\Bookmark\BookmarkDeleteController::deleteBookmark
    methods: [DELETE]
    requirements:
        locationId: "[0-9]+"

ibexa.rest.is_bookmarked:
    path: /bookmark/{locationId}
    controller: Ibexa\Rest\Server\Controller\Bookmark\BookmarkIsBookmarkedController::isBookmarked
    methods: [GET, HEAD]
    requirements:
        locationId: "[0-9]+"

ibexa.rest.load_bookmarks:
    path: /bookmark
    controller: Ibexa\Rest\Server\Controller\Bookmark\BookmarkListController::loadBookmarks
    methods: [GET]

# JWT

ibexa.rest.create_token:
    path: /user/token/jwt
    controller: Ibexa\Rest\Server\Controller\JWT::createToken
    methods: [POST]
